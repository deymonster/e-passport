generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Status {
  OPEN
  IN_PROGRESS
  CLOSED
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String?
  password  String
  role      Role      @default(USER)
  logs      Log[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("users")
}

model PC {
  id            Int      @id @default(autoincrement())
  sn            String   @unique
  pin           String
  descr         String?
  garant        DateTime
  block         Boolean  @default(false)
  documentPath  String?
  tickets       Ticket[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("pc")
}

model Ticket {
  id              Int       @id @default(autoincrement())
  pc              PC        @relation(fields: [pcId], references: [id])
  pcId            Int
  dateCreated     DateTime  @default(now())
  status          Status    @default(OPEN)
  messages        Message[]
  updatedAt       DateTime  @updatedAt
  confirmedByUser Boolean   @default(false)
  pendingClosure  Boolean   @default(false)

  @@unique([pcId, status])
  @@map("tickets")
}

model Message {
  id        Int      @id @default(autoincrement())
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  ticketId  Int
  content   String
  isAdmin   Boolean  @default(false)
  date      DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("messages")
}

model Log {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  action    String
  date      DateTime @default(now())
  details   String?

  @@map("logs")
}
